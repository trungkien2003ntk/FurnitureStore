@using FurnitureStore.Client.IServices.Customer
@using FurnitureStore.Shared
@using FurnitureStore.Shared.DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JavaScript
@inject IProductService ProductServiceDI
@inject NavigationManager navManager


<div class="modal">
	<div class="modal__overlay"></div>
	<div class="modal__body--border modal-body-right">
		<!-- chứa thành phần riêng  -->
		<div class="modal-cart">
			<div class="cart-contain">
				<div class="cart-header">
					<a class="cart-btn-close" href="" @onclick="CloseCart">
						<span class="material-symbols-outlined"> close </span>
					</a>
				</div>
				<div class="cart-contain-header">
					<div class="cart-contain-header1">
						<span>Cart</span>
						<span>$4,497.00 USD</span>
					</div>
					<div class="cart-contain-header2">
						<span><strong>3 item(s)</strong></span>
					</div>
				</div>
				<ul class="cart-list-product">
					@if (cartProducts != null)
					{
						@for (int i =0; i<cartProducts.Count();i++)
						{
							int index = i;
							<li class="cart-product-item">
								<div class="cart-product-img">
									<img class="cart-product-img-link"
										 src="@cartProducts.ElementAt(i).FeaturedImage"
									alt="" />
								</div>
								<div class="cart-product-detail">
									<div class="cart-product-name" @onclick="@(e => productClick(cartProducts.ElementAt(index).ProductId))">@cartProducts.ElementAt(i).Name</div>
									<div class="cart-product-color"> Blue Sky </div>
									<div class="cart-product-updown">
										<button class="cart-product-updown-link" @onclick="@(e => decreaseQuantityBtn(cartProducts.ElementAt(index).ProductId, @cartQuantity[index]))">-</button>
										
											<input class="cart-product-quantity"
											type="text"
											value="@cartQuantity[i]"
											   @onchange="@(e => changeQuantityInput(e,cartProducts.ElementAt(index).ProductId))" />
										<button class="cart-product-updown-link" @onclick="@(e => increaseQuantityBtn(cartProducts.ElementAt(index).ProductId,@cartQuantity[index]))">+</button>
										
									</div>
								</div>
								<div class="cart-product-detail2">
									<div class="cart-product-price">@cartProducts.ElementAt(i).RegularPrice</div>
									<div class="cart-header">
										<a class="cart-btn-delete" href="" @onclick="@(e => removeItemFromCart(cartProducts.ElementAt(index).ProductId))">
											<span class="material-symbols-outlined cart-btn-delete-icon">
												close
											</span>
										</a>
									</div>
								</div>
							</li>
						}
					}
				</ul>
			</div>
			<div class="cart-footer">
				<div class="cart-footer-head">
					<div class="cart-total">Total</div>
					<div class="cart-btn-checkout">$12,493.00</div>
				</div>
				<div class="cart-footer-top">
					<a class="app-btn app-btn-S" href="">View Cart</a>
					<a class="app-btn app-btn-S" href="" @onclick="CheckOut">Check Out</a>
					<strong>OR</strong>
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	[Parameter]
	public EventCallback<(bool, string)> ShowCartChanged { get; set; }
	private IEnumerable<ProductDTO>? cartProducts;
	private List<int>? cartQuantity;
	private async Task CloseCart()
	{
		await ShowCartChanged.InvokeAsync((false, ""));
	}
	// thanh toán
	private async Task CheckOut()
	{
		await ShowCartChanged.InvokeAsync((false,"checkout"));
	}
	protected override async Task OnInitializedAsync()
	{	
		await getShoppingCartFromCookie();
	}
	private async Task getShoppingCartFromCookie()
	{
		cartProducts = Enumerable.Empty<ProductDTO>();
		Dictionary<string, int> listProducts = await JavaScript.InvokeAsync<Dictionary<string, int>>("getProductsFromCookie");
		if (listProducts.Count !=0)
		{
			cartQuantity = listProducts.Values.ToList();
			List<string> productKeys = listProducts.Keys.ToList();
			//lấy ds sp lên
			this.cartProducts = await ProductServiceDI.GetProductListByProductIdList(productKeys);

		}
	}
	private async Task removeItemFromCart(string productId)
	{
		await JavaScript.InvokeAsync<string>("removeIdProductFromCookie", productId);
		await getShoppingCartFromCookie();

	}
	private async Task increaseQuantityBtn(string productId, int quantity)
	{

		await JavaScript.InvokeVoidAsync("updateIdProductIntoCookie", productId, ++quantity);
		await getShoppingCartFromCookie();

	}
	private async Task decreaseQuantityBtn(string productId, int quantity)
	{
		if (quantity > 1)
		{
			await JavaScript.InvokeVoidAsync("updateIdProductIntoCookie", productId, --quantity);
			await getShoppingCartFromCookie();

		}
	}
	private async Task changeQuantityInput(ChangeEventArgs e, string productId)
	{
		string temp = e.Value.ToString().Trim();
		if (temp.Length != 0)
		{
			int kq;
			if (int.TryParse(e.Value.ToString(), out kq) && kq > 0)
			{
				await JavaScript.InvokeVoidAsync("updateIdProductIntoCookie", productId, kq);
				await getShoppingCartFromCookie();
				return;
			}
		}
		
	}
	void productClick(string idProduct)
	{
		navManager.NavigateTo("/product/detail" + "/" + idProduct);
	}


}
