@using FurnitureStore.Client.IServices.Customer
@using FurnitureStore.Shared
@using FurnitureStore.Shared.DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JavaScript
@inject IProductService ProductServiceDI


<div class="modal">
	<div class="modal__overlay"></div>
	<div class="modal__body--border modal-body-right">
		<!-- chứa thành phần riêng  -->
		<div class="modal-cart">
			<div class="cart-contain">
				<div class="cart-header">
					<a class="cart-btn-close" href="" @onclick="CloseCart">
						<span class="material-symbols-outlined"> close </span>
					</a>
				</div>
				<div class="cart-contain-header">
					<div class="cart-contain-header1">
						<span>Cart</span>
						<span>$4,497.00 USD</span>
					</div>
					<div class="cart-contain-header2">
						<span><strong>3 item(s)</strong></span>
					</div>
				</div>
				<ul class="cart-list-product">
					@if (cartProducts != null)
					{
						@for (int i =0; i<cartProducts.Count();i++)
						{
								<li class="cart-product-item">
								<div class="cart-product-img">
									<img class="cart-product-img-link"
										 src="@cartProducts.ElementAt(i).FeaturedImage"
									alt="" />
								</div>
								<div class="cart-product-detail">
									<div class="cart-product-name">@cartProducts.ElementAt(i).Name</div>
									<div class="cart-product-color"> Blue Sky </div>
									<div class="cart-product-updown">
										<button class="cart-product-updown-link">-</button>
										
											<input class="cart-product-quantity"
											type="text"
											value="@cartQuantity[i]" />
											<button class="cart-product-updown-link">+</button>
										
									</div>
								</div>
								<div class="cart-product-detail2">
									<div class="cart-product-price">@cartProducts.ElementAt(i).RegularPrice</div>
									<div class="cart-header">
										<a class="cart-btn-delete" href="">
											<span class="material-symbols-outlined cart-btn-delete-icon">
												close
											</span>
										</a>
									</div>
								</div>
							</li>
						}
					}
				</ul>
			</div>
			<div class="cart-footer">
				<div class="cart-footer-head">
					<div class="cart-total">Total</div>
					<div class="cart-btn-checkout">$12,493.00</div>
				</div>
				<div class="cart-footer-top">
					<a class="app-btn app-btn-S" href="">View Cart</a>
					<a class="app-btn app-btn-S" href="" @onclick="CheckOut">Check Out</a>
					<strong>OR</strong>
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	[Parameter]
	public EventCallback<(bool, string)> ShowCartChanged { get; set; }
	private IEnumerable<ProductDTO>? cartProducts;
	private List<int>? cartQuantity;
	private async Task CloseCart()
	{
		await ShowCartChanged.InvokeAsync((false, ""));
	}
	// thanh toán
	private async Task CheckOut()
	{
		await ShowCartChanged.InvokeAsync((false,"checkout"));
	}
	protected override async Task OnInitializedAsync()
	{
		await JavaScript.InvokeVoidAsync("storeIdProductIntoCookie", "prod00004", 4);
		
		Dictionary<string, int> maSP = new Dictionary<string, int>();
		maSP.Add("prod00001", 1);
		maSP.Add("prod00002", 2);
		maSP.Add("prod00003", 3);
		await JavaScript.InvokeAsync<Dictionary<string, int>>("setCookie", "shopping_Cart", maSP);

		
		await getShoppingCartFromCookie();
	}
	private async Task getShoppingCartFromCookie()
	{
		Dictionary<string, int> listProducts = await JavaScript.InvokeAsync<Dictionary<string, int>>("getProductsFromCookie");
		if (listProducts.Count !=0)
		{
			cartQuantity = listProducts.Values.ToList();
			List<string> productKeys = listProducts.Keys.ToList();
			//lấy ds sp lên
			this.cartProducts = await ProductServiceDI.GetProductListByProductIdList(productKeys);

		}
	}
	
}
